package com.kissdry.jsonviewer.ui;

import com.kissdry.jsonviewer.util.PropertiesUtil;
import com.kissdry.jsonviewer.util.ParseJson;
import java.awt.Toolkit;
import javax.swing.UIManager;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.apache.commons.lang.StringEscapeUtils;

/**
 *
 * @author Administrator
 */
public class JSONViewerJFrame extends javax.swing.JFrame {

    /**
     * Creates new form JsonViewerJFrame
     */
    public JSONViewerJFrame() {
        initUI();
        initComponents();
        initTreeAndIcon();
    }

    public static void initUI() {
        PropertiesUtil.buildConf("zh_cn");
        try {
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JSONViewerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    private void initTreeAndIcon() {
        DefaultMutableTreeNode root = Kit.objNode("JSON");
        DefaultTreeModel model = (DefaultTreeModel) jsonTree.getModel();
        model.setRoot(root);
        JSONViewerUIUtil.setNodeIcon(jsonTree);
        setIconImage(Toolkit.getDefaultToolkit().getImage(
                getClass().getClassLoader().getResource("resources/images/json3.png")));//这个不能以 '/'开头]
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topjToolBar = new javax.swing.JToolBar();
        parseAndPretty = new javax.swing.JButton();
        parseAndPress = new javax.swing.JButton();
        cleanText = new javax.swing.JButton();
        escapeString = new javax.swing.JButton();
        unescapeString = new javax.swing.JButton();
        cleanNewLine = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        containerjTabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jsonTreejScrollPane = new javax.swing.JScrollPane();
        jsonTree = new javax.swing.JTree();
        jMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFile = new javax.swing.JMenuItem();
        saveFile = new javax.swing.JMenuItem();
        close = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cleanContent = new javax.swing.JMenuItem();
        formatContent = new javax.swing.JMenuItem();
        formatAndPettry = new javax.swing.JMenuItem();
        toolMenu = new javax.swing.JMenu();
        createTab = new javax.swing.JMenuItem();
        convertChinese = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMe = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        topjToolBar.setRollover(true);

        parseAndPretty.setText(JSONViewerUIUtil.getI18nById("parseAndPretty"));
        parseAndPretty.setFocusable(false);
        parseAndPretty.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        parseAndPretty.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        parseAndPretty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parseAndPrettyActionPerformed(evt);
            }
        });
        topjToolBar.add(parseAndPretty);

        parseAndPress.setText(JSONViewerUIUtil.getI18nById("parseAndPress"));
        parseAndPress.setFocusable(false);
        parseAndPress.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        parseAndPress.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        parseAndPress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parseAndPressActionPerformed(evt);
            }
        });
        topjToolBar.add(parseAndPress);

        cleanText.setText(JSONViewerUIUtil.getI18nById("cleanText"));
        cleanText.setFocusable(false);
        cleanText.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cleanText.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cleanText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanTextActionPerformed(evt);
            }
        });
        topjToolBar.add(cleanText);

        escapeString.setText(JSONViewerUIUtil.getI18nById("escape"));
        escapeString.setFocusable(false);
        escapeString.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        escapeString.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        escapeString.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escapeStringActionPerformed(evt);
            }
        });
        topjToolBar.add(escapeString);

        unescapeString.setText(JSONViewerUIUtil.getI18nById("unescape"));
        unescapeString.setFocusable(false);
        unescapeString.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        unescapeString.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        unescapeString.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unescapeStringActionPerformed(evt);
            }
        });
        topjToolBar.add(unescapeString);

        cleanNewLine.setText(JSONViewerUIUtil.getI18nById("cleanNewLine"));
        cleanNewLine.setFocusable(false);
        cleanNewLine.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cleanNewLine.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cleanNewLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanNewLineActionPerformed(evt);
            }
        });
        topjToolBar.add(cleanNewLine);

        jButton7.setText("jButton7");
        jButton7.setFocusable(false);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        topjToolBar.add(jButton7);

        jButton8.setText("jButton8");
        jButton8.setFocusable(false);
        jButton8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton8.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        topjToolBar.add(jButton8);

        jButton9.setText("jButton9");
        jButton9.setFocusable(false);
        jButton9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton9.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        topjToolBar.add(jButton9);

        jButton10.setText("jButton10");
        jButton10.setFocusable(false);
        jButton10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton10.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        topjToolBar.add(jButton10);

        jButton11.setText("jButton11");
        jButton11.setFocusable(false);
        jButton11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton11.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        topjToolBar.add(jButton11);

        jButton12.setText("jButton12");
        jButton12.setFocusable(false);
        jButton12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton12.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        topjToolBar.add(jButton12);

        jSplitPane1.setDividerLocation(630);
        jSplitPane1.setDividerSize(8);

        containerjTabbedPane.setAutoscrolls(true);

        jScrollPane1.setViewportView(jTextPane1);

        containerjTabbedPane.addTab("JSON Viewer", jScrollPane1);

        jSplitPane1.setLeftComponent(containerjTabbedPane);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jsonTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jsonTreejScrollPane.setViewportView(jsonTree);

        jSplitPane1.setRightComponent(jsonTreejScrollPane);

        fileMenu.setText(JSONViewerUIUtil.getI18nById("fileMenu"));

        openFile.setText(JSONViewerUIUtil.getI18nById("openFile"));
        fileMenu.add(openFile);

        saveFile.setText(JSONViewerUIUtil.getI18nById("saveFile"));
        fileMenu.add(saveFile);

        close.setText(JSONViewerUIUtil.getI18nById("cose"));
        fileMenu.add(close);

        jMenuBar.add(fileMenu);

        editMenu.setText(JSONViewerUIUtil.getI18nById("editMenu"));

        cleanContent.setText(JSONViewerUIUtil.getI18nById("cleanContent"));
        editMenu.add(cleanContent);

        formatContent.setText(JSONViewerUIUtil.getI18nById("formatContent"));
        editMenu.add(formatContent);

        formatAndPettry.setText(JSONViewerUIUtil.getI18nById("formatAndPettry"));
        editMenu.add(formatAndPettry);

        jMenuBar.add(editMenu);

        toolMenu.setText(JSONViewerUIUtil.getI18nById("toolMenu"));

        createTab.setText(JSONViewerUIUtil.getI18nById("createTab"));
        toolMenu.add(createTab);

        convertChinese.setText(JSONViewerUIUtil.getI18nById("convertChinese"));
        toolMenu.add(convertChinese);

        jMenuBar.add(toolMenu);

        helpMenu.setText(JSONViewerUIUtil.getI18nById("helpMenu"));

        aboutMe.setText(JSONViewerUIUtil.getI18nById("aboutMe"));
        aboutMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMeActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMe);

        jMenuBar.add(helpMenu);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(topjToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 1200, Short.MAX_VALUE)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topjToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void parseAndPrettyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parseAndPrettyActionPerformed
        parseJson(true);
    }//GEN-LAST:event_parseAndPrettyActionPerformed

    /**
     * 解析json 并尝试生成Jtree
     *
     * @author Jeff Liu<jeff.liu.guo@gmail.com>
     * @param prettyFormat
     */
    private void parseJson(boolean prettyFormat) {
        String jsonStr = jTextPane1.getText();
        if (jsonStr.isEmpty()) { 
            MessageUtil.showInfoMessageDialog(JSONViewerUIUtil.getI18nById("emptyJSON"));
        } else {
            DefaultMutableTreeNode root = Kit.objNode("JSON");
            DefaultTreeModel model = (DefaultTreeModel) jsonTree.getModel();
            try {

                jsonStr = ParseJson.parseJsonStr(jsonStr, prettyFormat);
                jTextPane1.setText(jsonStr);

                JSONViewerUIUtil.createJsonTree(ParseJson.parseJsonArray(jsonStr), root);
                model.setRoot(root);
                JSONViewerUIUtil.setNodeIcon(jsonTree);
            } catch (Exception ex) {
                root.removeAllChildren();
                model.setRoot(root);
                MessageUtil.showMessageDialogMessage(ex.getMessage(), "解析或者创建tree失败");
            }
        }

    }

    private void parseAndPressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parseAndPressActionPerformed
        parseJson(false);
    }//GEN-LAST:event_parseAndPressActionPerformed

    private void cleanTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanTextActionPerformed
        jTextPane1.setText("");
    }//GEN-LAST:event_cleanTextActionPerformed

    private void escapeStringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escapeStringActionPerformed
        String jsonStr = jTextPane1.getText();
        if (!jsonStr.isEmpty()) {
            StringEscapeUtils.escapeJava(jsonStr);
        }
    }//GEN-LAST:event_escapeStringActionPerformed

    private void unescapeStringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unescapeStringActionPerformed
        String jsonStr = jTextPane1.getText();
        if (!jsonStr.isEmpty()) {
            StringEscapeUtils.unescapeJava(jsonStr);
        }
    }//GEN-LAST:event_unescapeStringActionPerformed

    private void cleanNewLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanNewLineActionPerformed
        String jsonStr = jTextPane1.getText();
        if (!jsonStr.isEmpty()) {
            jTextPane1.setText(jsonStr.replaceAll("\n", ""));
        }
    }//GEN-LAST:event_cleanNewLineActionPerformed

    private void aboutMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMeActionPerformed
        ControllerJFrame.showAboutBoxFrame();
    }//GEN-LAST:event_aboutMeActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(() -> {
//            initUI();
//            JSONViewerJFrame jframe = new JSONViewerJFrame();
//            jframe.initTreeAndIcon();
//            jframe.setVisible(true);
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMe;
    private javax.swing.JMenuItem cleanContent;
    private javax.swing.JButton cleanNewLine;
    private javax.swing.JButton cleanText;
    private javax.swing.JMenuItem close;
    private javax.swing.JTabbedPane containerjTabbedPane;
    private javax.swing.JMenuItem convertChinese;
    private javax.swing.JMenuItem createTab;
    private javax.swing.JMenu editMenu;
    private javax.swing.JButton escapeString;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem formatAndPettry;
    private javax.swing.JMenuItem formatContent;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTree jsonTree;
    private javax.swing.JScrollPane jsonTreejScrollPane;
    private javax.swing.JMenuItem openFile;
    private javax.swing.JButton parseAndPress;
    private javax.swing.JButton parseAndPretty;
    private javax.swing.JMenuItem saveFile;
    private javax.swing.JMenu toolMenu;
    private javax.swing.JToolBar topjToolBar;
    private javax.swing.JButton unescapeString;
    // End of variables declaration//GEN-END:variables
}
